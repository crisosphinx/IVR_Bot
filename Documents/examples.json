{
  "comment":
  [
    "// This is a comment",
    "int a; // Integer a is by default \"0\"",
    "// Comments are useful for commenting on code, placement, etc."
  ],
  "comment block": [
    "/* This is a comment block */",
    "/*\nThis is also a comment block.\nSpecifically a multilined block.\n*/",
    "/*README\n----------------\nThis is also a comment block.\nYou could use this to create\nsome form of readme doc in\nyour code!\n*/"
  ],
  "bool": [
    "bool a; // a is default false",
    "bool b = true; // b now equals true",
    "bool test(){\n\t    bool a = true;\n    return a; // returns a boolean or true/false statement\n}"
  ],
  "sbyte": [
    "sbyte value1 = -128;  // -128 is the highest number it can be",
    "sbyte value2 = 127;   // 127 is the highest number it can be",
    "sbyte value3;         // Default value is 0",
    "sbyte test(){\n    sbyte b = 255;\n    if (b < 128){\n        return b;\n    }\n    else {\n        return (sbyte)-128; // returns an signed byte\n    }\n}"
  ],
  "byte": [
    "byte value1;        // 0 is the default and the lowest number it can be",
    "byte value2 = 32;",
    "byte value3 = 255; // 255 is the highest number it can be",
    "byte test(){\n    byte b = 255;\n    if (b < 256){\n        return b;\n    }\n    else {\n        return (byte)0; // returns an unsigned byte\n    }\n}"
  ],
  "int": [
    "int a; // 0 is default",
    "int b = -4;",
    "int c = 10000;",
    "int test(){\n    int a = 10;\n    return a; // returns an integer\n}"
  ],
  "uint": [
    "uint a; // 0 is the lowest number you can have",
    "uint b = 84;",
    "uint c = 10000;",
    "uint test(){\n    uint a; // this is equal to 0\n    return a; // returns an unsigned integer\n}"
  ],
  "float": [
    "float a; // 0.0 is the default value",
    "float b = 1.0f;",
    "float c = -49.37f;",
    "float d = 101.0f;",
    "float test(){\n    float a = -5.4f;\n    float b = 2f;\n    return a * b; // returns a float\n}"
  ],
  "double": [
    "double a; // 0.0 or 0.00 is the default value",
    "double b = 0.00;",
    "double c = -5.6;",
    "double d = 510.36;",
    "double test(){\n    double d = 0.00;\n    return d; // returns a double\n}"
  ],
  "short": [
    "short a; // default is 0",
    "short b = -32768;",
    "short c = 32767;",
    "short test(){\n    short s = -32768;\n    return s; // returns a short\n}"
  ],
  "ushort": [
    "ushort a; // default 0 and is lowest number it can be",
    "ushort b = 0;",
    "ushort c = 65535;",
    "ushort test(){\n    ushort s = 100;\n    return s; // returns an unsigned short\n}"
  ],
  "long": [
    "long a = -9223372036854775808; // lowest number it can be",
    "long b; // default is 0",
    "long c = 0;",
    "long d = 1923;",
    "long test(){\n    long l = -29389503;\n    return l; // returns a long\n}\n"
  ],
  "ulong": [
    "ulong a = 18446744073709551615; // max it can go",
    "ulong b;",
    "ulong c = 2;",
    "ulong d = 1923;",
    "ulong test(){\n    ulong l = -29389503;\n    return l; // returns a long\n}"
  ],
  "char": [
    "char z; // This equals to ''",
    "char a = 'a';",
    "char character = 'b';",
    "char hello = 'H';",
    "char test(){\n    char a = 'H';\n    return a; // returns a character\n}"
  ],
  "string": [
    "string a; // This equals to \"\"",
    "string b = \"hello world\";",
    "string c = \"test\";",
    "string literalString = @\"good morning\"; // a string literal",
    "string docs = @\"c:\\users\\user1\\documents\\a.txt\"; // \"c:\\\\users\\\\user1\\\\documents\\\\a.txt\"",
    "string quotes = @\"\"\"Ahoy matey!\"\" cried the captain.\" // \"Ahoy matey!\" cried the captain.",
    "string test(){\n    string helloworld = \"hello world\";\n    return helloworld; // returns a string\n}"
  ],
  "dynamic": [
    "dynamic a = 0;",
    "dynamic d = \"a string\";",
    "dynamic test(){\n    dynamic a = \"hello world\";\n    return a; // returns a string, in this case. But that string is through a dynamic.\n}"
  ],
  "var": [
    "var a;",
    "var b = 1;",
    "var c = \"hello world\";",
    "var d = 1.5f;",
    "var e = -1.66;",
    "var f = 'g';",
    "var test(){\n    var a = 1;\n    return a; // returns an integer in this case, but it is an integer through a dynamic variable.\n}"
  ],
  "object": [
    "object a;",
    "object a = null;",
    "object b = 'S';",
    "object c = \"test\";"
  ],
  "null": [
    "var a = null;",
    "if (a == null){\n    Debug.Log(\"null object\");\n}"
  ],
  "decimal": [
    "decimal d;",
    "decimal a = 79228162512564337593543950335; // max high",
    "decimal test(){\n    decimal d = 2.57493784956;\n    return decimal;\n}"
  ],
  "void": [
    "void test(){\n    return null;\n}"
  ],
  "class": [
    "MyClass mc = new MyClass();",
    "public class MyClass{\n    void test(){\n         return null;\n    }\n}"
  ],
  "return": [
    "return 0; // must be used in a function / method or a loop",
    "void test(){\n     return null;\n }"
  ],
  "break": [
    "for (int i = 0; i < 10; i++){\n    if (i == 1){\n        break; // instantly breaks the loop after the first two integers and must be used in a loop.\n    }\n}"
  ],
  "if": [
    "bool b = true;\nif (b){\n    Debug.Log(true);\n}"
  ],
  "else": [
    "bool b = false;\nif (b){\n    Debug.Log(true);\n}\nelse {\n    Debug.Log(false);\n}"
  ],
  "do / while": [
    "int n = 0;\ndo {\n    Debug.Log(n);\n    n++;\n}\nwhile (n < 4);"
  ],
  "foreach": [
    "var names = new List<String> {\"Felicia\", \"Ragnorak\", \"Sam\", \"Maria\", \"Trevor\", \"Shiva\"};\nforeach (string name in names){\n    Debug.Log($\",\"Hello {name.ToString()}!\");\n}"
  ],
  "for": [
    "for (int i = 0; i < 10; i++){\n    Debug.Log(i.ToString());\n}"
  ],
  "switch": [
    "int switchCase = 1;\nswitch (switchCase){\n    case 0:\n        Debug.Log(\"Case 0\");\n        break;\n    case 1:\n        Debug.Log(\"Case 1\");\n        break;\n    case 2:\n        Debug.Log(\"Case 2\");\n        break;\n    default:\n        Debug.Log(\"Case \\\\\"Default\\\\\"\");\n        break;\n}"
  ],
  "try / catch / finally": [
    "static void Main(){\n    int n;\n    try {\n        // Do not initialize this variable here.\n        n = 123;\n    }\n    catch {\n    }\n    finally {\n        // Error: Use of unassigned local variable 'n'.\n        Console.Write(n);\n    }\n}"
  ],
  "throw": [
    "class ThrowTest3\n{\n    static void ProcessString(string s)\n    {\n        if (s == null)\n        {\n            throw new ArgumentNullException();\n        }\n    }\n    public static void Main()\n    {\n        try\n        {\n            string s = null;\n            ProcessString(s);\n        }\n        // Most specific:\n        catch (ArgumentNullException e)\n        {\n            Console.WriteLine(\"{0} First exception caught.\", e);\n        }\n        // Least specific:\n        catch (Exception e)\n        {\n            Console.WriteLine(\"{0} Second exception caught.\", e);\n        }\n    }\n}"
  ],
  "public": [
    "public class MyClass(){\n}",
    "public int a; // creates a publicly accessible integer variable \"a\""
  ],
  "private": [
    "private class MyClass(){\n}",
    "private float a; // creates a privately accessible float variable \"a\""
  ],
  "struct": [
    "struct Coordinate\n{\n    public int x;\n    public int y;\n}\nCoordinate point = new Coordinate();\nDebug.Log(point.x);  // prints 0\nDebug.Log(point.y);  // prints 0"
  ],
  "static": [
    "static void Main(){\n    // Add your code here\n};",
    "private static void Main(){\n    // Add your code here\n};",
    "public static void Main(){\n    // Add your code here\n};",
    "private static bool = false;"
  ],
  "abstract": [
    "abstract class Animal\n{\n    public abstract void animalSound();\n    public void sleep()\n    {\n        Debug.Log(\"zzz\");\n    }\n}\nAnimal myObj = new Animal(); // Will generate an error because this cannot create an instance of an abstract class or interface."
  ],
  "interface": [
    "interface Animal\n{\n    void animalSound(); // interface method (does not have a body)\n    void run(); // another interface method (does not have a body)\n}",
    "interface Animal\n{\n    void animalSound();\n}\n\nclass Pig : Animal\n{\n     public void animalSound()\n     {\n         Debug.Log(\"The pig says: \\\"squeal squeal\\\"!\");\n     }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Pig myPig = new Pig(); // creates a pig object\n        myPig.animalSound(); // should squeal!\n    }\n}"
  ],
  "virtual": [
    "class A\n{\n    public virtual void show()\n    {\n         Debug.Log(\"Hello! This is a Base Class!\");\n    }\n}"
  ],
  "override": [
    "class A\n{\n    public virtual void show()\n    {\n         Debug.Log(\"Hello! This is a Base Class!\");\n    }\n}\n\n// Derived Class\nclass B : A // In our projects, we use \"MonoBehaviour\" as our base class\n{\n    public override void show()\n    {\n        Debug.Log(\"Hello! This is a Derived Class!\");\n    }\n}"
  ],
  "new": [
    "MyClass mc = new MyClass();",
    "Vector3 direction = new Vector3(0, 0, 0);",
    "Quaternion rotation = new Quaternion(1, 1, 1, 1);"
  ],
  "header": [
    "[Header(str)]",
    "[Header(\"This is a float modifier for movement speed.\")]"
  ],
  "polymorphism": [

  ],
  "namespace": [
    "namespace DocLoader{\n// Define an alias for the nested namespace}",
    "namespace PC{\n    // Define an alias for the nested namespace.\n    using Project = PC.MyCompany.Project;\n    class A{\n        void M()\n        {\n            // Use the alias\n            var mc = new Project.MyClass();\n        }\n    }\n    namespace MyCompany{\n        namespace Project{\n            public class MyClass { }\n        }\n    }\n}"
  ],
  "using": [
    "using System;",
    "using System.Collections.Generic;",
    "using static System.Math;",
    "using UnityEngine;"
  ],
  "=": [
    "int i = 0;",
    "float a = 0.0f;",
    "string hello = \"hello world\";",
    "char t = 'R';"
  ],
  "!": [
    "if (!a){\n    //do something\n}",
    "bool b = true;\nb = !b; //reverses or changes the boolean \"b\" to false instead of true"
  ],
  "+": [
    "float a = 1.0f + 2.6f; // \"a\" now equals 3.6f",
    "int b = 100;\n b = 0 + b + 10; // \"b\" now equals 110",
    "string hello = \"A\" + \" special prize is \" + \"awarded to those who do well.\";",
    "int i = 0;\nstring a = \"Integer equals \" + i.ToString();"
  ],
  "-": [
    "float a = 1.5f - .5f; // \"a\" now equals 1.0f",
    "int a = 0;\n a = a - 1; \"a\" now equals -1",
    "double a = 1.45;\n double b;\n b = a - 3.4;"
  ],
  "*": [
    "float a = 1f * 1f; // \"a\" now equals 1.0",
    "int b = 5;\nint d = 0;\nint h;\nh = a * (d + 2); // \"h\" equals 10"
  ],
  "/": [
    "uint a = 0;\na = a / 20; // this equals 0",
    "float b = 1;\nb = b / 2; // this equals .5f"
  ],
  "%": [
    "int a = 0;\na = a % 2; // this equals 0",
    "int a = 1;\na = a % 2; // this equals 1",
    "int a = 2;\na = a % 2; // this equals 0"
  ],
  "<": [
    "int i = 3;\nif (i < 10){\n    Debug.Log(true);\n}",
    "float f = 0.3f;\nif (10 < f){\n    Debug.Log(false);\n}"
  ],
  ">": [
    "int i = 3;\n while (i > 0){\n    Debug.Log(i.ToString());\n    i--;}",
    "double d = 10.67;\n if (d > 0){\n    Debug.Log(d.ToString());\n}"
  ],
  "^": [
    "Debug.Log(true ^ true);    // output: false",
    "Debug.Log(true ^ false);   // output: true",
    "Debug.Log(false ^ true);   // output: true",
    "Debug.Log(false ^ false);  // output: false"
  ],
  "|": [
    "bool a = true | false;  // This evaluates as true"
  ],
  "?": [
    "condition ? ref consequent",
    "int? maybe = 12;",
    "string? message = \"This is not the null string\";"
  ],
  "??": [
    "int? a = null;\nint b = a ?? -1;\nDebug.Log(b); // output: -1"
  ],
  "&&": [
    "string a = \"hello\";\nif (a == \"hello\" && a != \"1\"){\nDebug.Log(true);\n}",
    "int a = 0;\nbool b = true;\nwhile (a < 100 && b){\nb = false;\n}"
  ],
  "||": [
    "if (1 < 0 || 0 == 0)\n{\n    Debug.Log(\"true\");\n    // this prints true, because 0 is equal to 0\n}",
    "if (-1 < 0 || 1 == 0)\n{\n    Debug.Log(\"true\");\n    // this prints true, because -1 is less than 0\n}"
  ],
  "==": [
    "if (0 == 0){\n    Debug.Log(true);  // Prints true\n}",
    "if (1 == 0){\n    Debug.Log(true);\n}\nelse{\n    Debug.Log(false); // Prints false\n}"
  ],
  "!=": [
    "if (0 != 0){\n    Debug.Log(true);  // is true\n}\nelse{\n    Debug.Log(false); // Prints false\n}",
    "if (100 != 0){\n    Debug.Log(true);  // is true\n}\nelse{\n    Debug.Log(false); // Prints true\n}"
  ],
  ">=": [
    "if (2.3 >= 2){\n    Debug.Log(true); // This will print true due to 2.3 being greater than or equal to 2.0\n}",
    "if (100 >= -200){\n    Debug.Log(true); // This will print true due to 100 being greater than or equal to -200\n}",
    "if (10 >= 200){\n    Debug.Log(true);\n}\nelse{\n    Debug.Log(false); // This will print false, because 10 is less than 200\n}"
  ],
  "<=": [
    "if (0 <= 1){\n    Debug.Log(true); // This will print true due to 0 being less than or equal to 1.\n}",
    "if (1 <= 1){\n    Debug.Log(true); // This will print true due to 1 being less than or equal to 1.\n}",
    "if (3 <= 1){\n    Debug.Log(true); // This will not do anything. 3 is greater than 1.\n}"
  ],
  "<<": [
    "byte a;\na = 1 << 3;\nDebug.Log(a); // Prints 8, as we are bitwise shifting 1 to the left 3 bytes".,
    "byte a = 0b_1111_0001;\nvar b = a << 8;\nConsole.WriteLine(b.GetType());\nConsole.WriteLine($\"Shifted byte: {Convert.ToString(b, toBase: 2)}\");"
  ],
  ">>": [
    "uint x = 0b_1001;\nConsole.WriteLine($\"Before: {Convert.ToString(x, toBase: 2), 4}\");\n\nuint y = x >> 2;\nConsole.WriteLine($\"After:  {Convert.ToString(y, toBase: 2), 4}\");\n// Output:\n// Before: 1001\n// After:    10",
    "int a = int.MinValue;\nConsole.WriteLine($\"Before: {Convert.ToString(a, toBase: 2)}\");\n\nint b = a >> 3;\nConsole.WriteLine($\"After:  {Convert.ToString(b, toBase: 2)}\");\n// Output:\n// Before: 10000000000000000000000000000000\n// After:  11110000000000000000000000000000"
  ],
  "+=": [
    "int a = 0;\na += 1; // \"a\" now equals 1.\nDebug.Log(a);",
    "float a = 3.2f;\na += 1.05f; // \"a\" now equals 4.25.\nDebug.Log(a);",
    "int a = 0;\nwhile (a < 10){\n    Debug.Log(a);\n    a += 1;\n}"
  ],
  "-=": [
    "int a = 0;\na -= 1; // \"a\" now equals -1\nDebug.Log(a);",
    "float a = 200.4f;\na -= 200f; // \"a\" now equals .4\nDebug.Log(a);",
    "float a = 20f;\nwhile (a > 10){\n    Debug.Log(a);\n    a -= .1;\n}"
  ],
  "*=": [
    "int g = 1;\ng *= 1; // \"g\" still equals 1",
    "float g = -1f;\ng *= -1f; // \"g\" equals 1, not -1",
    "int a = 2;\nwhile (a < 100){\n    Debug.Log(a);\n    a *= 5;\n}"
  ],
  "/=": [
    "int i = 50;\ni /= 2;  // this is the same as  i = i / 2;\nDebug.Log(i); // prints 25 to the debug menu",
    "int a = 200;\nwhile (a > 0){\n    Debug.Log(a);\n    a /= 2;\n}"
  ],
  "|=": [
    "uint a = 0b_1111_1000;\na |= 0b_0011_0001;\nDebug.Log(a);  // output: 10111001"
  ],
  "&=": [
    "uint a = 0b_1111_1000;\na &= 0b_1001_1101;\nDebug.Log(a);  // output: 10011000"
  ],
  "^=": [
    "uint a = 0b_1111_1000;\na ^= 0b_1000_0000;\nDebug.Log(a);  // output:   111001"
  ],
  "%=": [
    "int a = 2;\na %= 12;\nDebug.Log(a.ToString()); // 2 is the output",
    "int a = 2;\na %= 2;\nDebug.Log(a.ToString()); // 0 is the output"
  ],
  "?:": [
    "condition ? ref consequent : ref alternative",
    "int a;\nbool b = true;\na = b? 1 : 0;\nDebug.Log(a);"
  ],
  "++": [
    "int i = 0;\ni++;",
    "int a = 0;\nwhile(a < 10){\n    a++;\n}"
  ],
  "--": [
    "int i = 0;\ni--;"
  ],
  "??=": [
    "variable ??= expression;",
    "int? a = null;\na ??= -1;\nDebug.Log(b); // output: -1"
  ],
  "<<=": [
    "uint a = 0b_1111_1000;\na <<= 2;\nDebug.Log(a); // output: 11100100",
    "int a = 2;\na <<= 12;\nDebug.Log(a); // output: 8192"
  ],
  ">>=": [
    "uint a = 0b_1111_1000;\na >>= 4;\nDebug.Log(a); // output:     1110"
  ],
  "as": [
    "string c = \"test\";\nobject a = c;\nstring b = a as string;\nConsole.WriteLine(b);"
  ],
  "is": [
    "E is T ? (T)(E) : (T)null;",
    "string a = \"test\";\nobject b = a;\nobject c = b is string ? (string)(b) : (object)null;\nConsole.WriteLine(b);"
  ],
  "casting": [
    "double x = 1234.7;\nint a = (int)x; // now equals 1234"
  ],
  "list": [
    "List<Type> name = new List<Type>();",
    "List<string> wordList = new List<string>() {\"TEST\", \"TESTER\", \"Hello World\"};"
  ],
  "array": [
    "int[] b = {1,2,3,4,5,6};",
    "string[] c = {\"asdf\",\"zxcv\",\"qwer\",\"bigbob\",\"cheetah\"};",
    "char[] c = {'a', 'b', 'c', 'D', 'e', 'F'};"
  ],
  "dictionary": [
    "Dictionary<string, int> a = new Dictionary<string, int>() {{\"test\", 1}, {\"test2\", 2}, {\"test3\", 3}};",
    "Dictionary<string, string> a = new Dictionary<string, int>();\na.Add(\"test\", \"hello\");"
  ],
  "gameobject": [
    "GameObject gObj = gameObject;",
    "private void OnCollisionEnter(Collision col){\n    GameObject obj = col.gameObject;\n    Debug.Log(obj.name);\n}"
  ],
  "tuple": [
    "Tuple<int, string, string> person = new Tuple <int, string, string>(1, \"Steve\", \"Jobs\");",
    "var person = Tuple.Create(1, \"Steve\", \"Jobs\");",
    "Tuple<T1, T2, T3, T4, T5, T6, T7, TRest>",
    "var numbers = Tuple.Create(\"One\", 2, 3, \"Four\", 5, \"Six\", 7, 8);\nnumbers.Item1; // returns \"One\""
  ],
  "vector": [
    "Vector2 vec = new Vector2() {90, 45};",
    "Vector3 vec = new Vector2() {90, 45, 72};",
    "Vector4 vec = new Vector2() {90, 45, 60, 25};"
  ],
  "quaternion": [
    "Quaternion quat = new Quaternion() {pitch, yaw, roll, rotation around vector};",
    "Quaternion quat = new Quaternion() {x, y, z, w};",
    "Quaternion quat = new Quaternion() {1, 1, 1, 1};",
    "Quaternion quat = new Quaternion() {0, .5f, .5f, .25f};",
    "Quaternion quat = new Quaternion() {0, .5f, .5f, .25f};\nVector3 vec = quat.Euler(); // Allows you to get the angle"
  ],
  "pragma": [
    "#pragma warning disable CS0168",
    "#pragma warning restore warning-list",
    "#pragma warning disable 414, CS3021",
    "#pragma checksum \"filename\" \"{guid}\" \"checksum bytes\"",
    "#pragma checksum \"filename\" \"{guid}\" \"checksum bytes\""
  ],
  "region": [
    "#region MyClass definition\npublic class MyClass\n{\n    static void Main()\n    {\n    }\n}\n#endregion"
  ],
  "warning": [
    "#warning Deprecated code in this method."
  ],
  "error": [
    "#error Deprecated code in this method."
  ],
  "line": [
    "class MainClass\n{\n    static void Main()\n    {\n#line 200 \"Special\"\n        int i;\n        int j;\n#line default\n        char c;\n        float f;\n#line hidden // numbering not affected\n        string s;\n        double d;\n    }\n}"
  ],
  "nullable": [
    "#nullable disable",
    "#nullable enable",
    "#nullable restore",
    "#nullable disable annotations",
    "#nullable enable annotations",
    "#nullable restore annotations",
    "#nullable disable warnings",
    "#nullable enable warnings",
    "#nullable restore warnings"
  ],
  "if / elif / else / endif": [
    "#if DEBUG\nConsole.WriteLine(\"Debug version\");\n#elif (DEBUG == false)\nConsole.WriteLine(\"Not Debug version\");\n#else\n// This is unreachable\n#endif"
  ],
  "define": [
    "#define VC7\n//...\n#if debug\n    Console.WriteLine(\"Debug build\");\n#elif VC7\n    Console.WriteLine(\"Visual Studio 7\");\n#endif",
    "#define MYTEST\nusing System;\npublic class MyClass\n{\n    static void Main()\n    {\n#if (DEBUG && !MYTEST)\n        Console.WriteLine(\"DEBUG is defined\");\n#elif (!DEBUG && MYTEST)\n        Console.WriteLine(\"MYTEST is defined\");\n#elif (DEBUG && MYTEST)\n        Console.WriteLine(\"DEBUG and MYTEST are defined\");  \n#else\n        Console.WriteLine(\"DEBUG and MYTEST are not defined\");\n#endif\n    }\n}",
    "#define VERBOSE\n\n#if VERBOSE\n   Console.WriteLine(\"Verbose output version\");\n#endif"
  ]
}